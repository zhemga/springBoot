{"version":3,"sources":["services/user/userActions.js","services/user/userTypes.js","services/user/auth/authActions.js","services/user/auth/authTypes.js","Components/Menu/menu.js","Components/User/Login.js","Components/User/Register.js","utils/authToken.js","Components/Home.js","http-common.js","services/upload-files.service.js","Components/Upload.js","Components/Welcome.js","App.js","serviceWorker.js","services/user/userReducer.js","services/user/auth/authReducer.js","services/rootReducer.js","services/store.js","index.js"],"names":["userRequest","type","userSuccess","userFailure","error","payload","success","isLoggedIn","failure","connect","state","auth","dispatch","logoutUser","localStorage","removeItem","props","guestLinks","Nav","className","to","userLinks","onClick","Navbar","bg","expand","variant","Container","Brand","class","Toggle","aria-controls","Collapse","id","Link","Login","initialState","username","password","credentialChange","event","setState","target","name","value","validateUser","authenticateUser","connection","WebSocket","onopen","console","log","send","setTimeout","history","push","resetLoginForm","this","Row","Col","xs","message","Alert","Card","Header","icon","faSignInAlt","Body","Form","Group","as","InputGroup","Text","faUser","FormControl","required","autoComplete","onChange","placeholder","faLock","Footer","style","Button","size","disabled","length","faUndo","Component","credentials","axios","post","then","response","token","headers","authorization","setItem","data","catch","Register","passwordConfirm","registerUser","user","isRegistered","userObject","authToken","defaults","common","jwtToken","backgroundColor","color","create","baseURL","file","onUploadProgress","formData","FormData","append","http","get","UploadFiles","selectFile","bind","upload","selectedFiles","undefined","currentFile","progress","fileInfos","UploadService","getFiles","files","Math","round","loaded","total","Table","striped","bordered","hover","map","index","href","fileDownloadUri","fileName","fileType","Welcome","text","src","App","oldUrl","getRows","url","Authorization","getItem","el","lg","path","exact","component","render","Home","Upload","Boolean","window","location","hostname","match","reducer","action","rootReducer","combineReducers","userReducer","authReducer","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f22f632c.chunk.js","sourcesContent":["import * as UT from \"./userTypes\";\nimport axios from \"axios\";\n\nexport const registerUser = (username, password, passwordConfirm) => {\n  return (dispatch) => {\n    let userObject = {\"username\" : username, \"password\" : password, \"passwordConfirm\" : passwordConfirm}; \n    dispatch(userRequest());\n    axios\n      .post(\"http://localhost:8080/api/public/register\", userObject)\n      .then((response) => {\n        dispatch(userSuccess());\n      })\n      .catch((error) => {\n        dispatch(userFailure(error.message));\n      });\n  };\n};\n\nconst userRequest = () => {\n  return {\n    type: UT.USER_REQUEST,\n  };\n};\n\nconst userSuccess = () => {\n  return {\n    type: UT.USER_SUCCESS\n  };\n};\n\nconst userFailure = (error) => {\n  return {\n    type: UT.USER_FAILURE,\n    payload: error,\n  };\n};\n","export const USER_REQUEST = \"USER_REQUEST\";\nexport const USER_SUCCESS = \"USER_SUCCESS\";\nexport const USER_FAILURE = \"USER_FAILURE\";\n","import * as AT from \"./authTypes\";\nimport axios from \"axios\";\n\nexport const authenticateUser = (username, password) => {\n  const credentials = {\n    username: username,\n    password: password,\n  };\n  return (dispatch) => {\n    dispatch({\n      type: AT.LOGIN_REQUEST,\n    });\n    axios\n      .post(\"http://localhost:8080/api/public/login\", credentials)\n      .then((response) => {\n        let token = response.headers.authorization;\n\n        localStorage.setItem(\"jwtToken\", token);\n        dispatch(success({ username: response.data.username, isLoggedIn: true }));\n      })\n      .catch((error) => {\n        dispatch(failure());\n      });\n  };\n};\nexport const logoutUser = () => {\n  return (dispatch) => {\n    dispatch({\n      type: AT.LOGOUT_REQUEST,\n    });\n    localStorage.removeItem(\"jwtToken\");\n    dispatch(success(false));\n  };\n};\n\nconst success = (isLoggedIn) => {\n  return {\n    type: AT.SUCCESS,\n    payload: isLoggedIn,\n  };\n};\n\nconst failure = () => {\n  return {\n    type: AT.FAILURE,\n    payload: false,\n  };\n};\n","export const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\nexport const SUCCESS = \"SUCCESS\";\nexport const FAILURE = \"FAILURE\";\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar } from 'react-bootstrap';\nimport { Container } from 'react-bootstrap';\nimport { Nav } from 'react-bootstrap';\nimport { logoutUser } from \"../../services/index\";\nimport { connect } from \"react-redux\";\n\nconst Menu = (props) => {\n  const logout = () => {\n    props.logoutUser();\n  };\n\n  const guestLinks = (\n    <>\n      <Nav className=\"ml-auto\">\n        <Link to=\"/register\" className=\"text-warning nav-link\">\n          Register\n        </Link>\n        <Link to=\"/login\" className=\"text-warning nav-link\">\n          Login\n        </Link>\n      </Nav>\n    </>\n  );\n  const userLinks = (\n    <>\n      <Nav>\n        <Link to=\"/animalList\" className=\"text-danger nav-link\">\n          Animal List\n        </Link>\n      </Nav>\n      <Nav>\n        <Link to=\"/userList\" className=\"text-danger nav-link\">\n          User List\n        </Link>\n      </Nav>\n      <Nav className=\"navbar-right\">\n        <Link to=\"/logout\" className=\"nav-link\" onClick={logout}>\n          Logout\n        </Link>\n      </Nav>\n    </>\n  );\n\n  return (\n    <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n      <Container>\n        <Navbar.Brand>\n          <Link class=\"navbar-brand\" to=\"/\">Animal Hotel</Link>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"me-auto\">\n            <Nav.Link>\n              <Link class=\"nav-link\" to=\"/\">Home</Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link class=\"nav-link\" to=\"/about/\">About Hotel</Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link class=\"nav-link text-warning\" to=\"/files\">Files Up/Download</Link>\n            </Nav.Link>\n          </Nav>\n          {props.auth.isLoggedIn ? userLinks : guestLinks}\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.auth,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    logoutUser: () => dispatch(logoutUser()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Row, Col, Card, Form, InputGroup, FormControl, Button, Alert } from 'react-bootstrap';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignInAlt, faUser, faLock, faUndo } from \"@fortawesome/free-solid-svg-icons\";\nimport { authenticateUser } from '../../services/index';\nimport { useHistory } from \"react-router-dom\";\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.initialState;\n    }\n\n    initialState = {\n        username: '', password: '', error: ''\n    };\n\n    credentialChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n    validateUser = () => {\n        this.props.authenticateUser(this.state.username, this.state.password);\n\n        var connection = new WebSocket('ws://127.0.0.1:4444');\n\n        connection.onopen = function () {\n            console.log('Connected!');\n            connection.send('Ping'); // Send the message 'Ping' to the server\n        };\n\n        setTimeout(() => {\n            if (this.props.auth.isLoggedIn) {\n                this.props.history.push(\"/home\");\n            } else {\n                this.resetLoginForm();\n                this.setState({ \"error\": \"Invalid login and password\" });\n            }\n        }, 2500);\n    };\n\n    resetLoginForm = () => {\n        this.setState(() => this.initialState);\n    };\n\n    render() {\n        const { username, password, error } = this.state;\n\n        return (\n            <Row className=\"justify-content-md-center\">\n                <Col xs={5}>\n                    {this.props.message && <Alert variant=\"success\">{this.props.message}</Alert>}\n                    {error && <Alert variant=\"danger\">{error}</Alert>}\n                    <Card className={\"border border-dark bg-dark text-white\"}>\n                        <Card.Header>\n                            <FontAwesomeIcon icon={faSignInAlt} /> Login\n                        </Card.Header>\n                        <Card.Body>\n                            <Form.Group as={Col}>\n                                <InputGroup>\n                                    <InputGroup.Text><FontAwesomeIcon icon={faUser} /></InputGroup.Text>\n                                    <FormControl required autoComplete=\"off\" type=\"text\" name=\"username\" value={username} onChange={this.credentialChange}\n                                        className={\"bg-dark text-white\"} placeholder=\"Enter Login\" />\n                                </InputGroup>\n                            </Form.Group>\n                            <Form.Group className=\"mt-3\" as={Col}>\n                                <InputGroup>\n                                    <InputGroup.Text><FontAwesomeIcon icon={faLock} /></InputGroup.Text>\n                                    <FormControl required autoComplete=\"off\" type=\"password\" name=\"password\" value={password} onChange={this.credentialChange}\n                                        className={\"bg-dark text-white\"} placeholder=\"Enter Password\" />\n                                </InputGroup>\n                            </Form.Group>\n                        </Card.Body>\n                        <Card.Footer style={{ \"textAlign\": \"right\" }}>\n                            <Button size=\"sm\" type=\"button\" variant=\"success\" onClick={this.validateUser}\n                                disabled={this.state.username.length === 0 || this.state.password.length < 6}>\n                                <FontAwesomeIcon icon={faSignInAlt} /> Login\n                            </Button>{' '}\n                            <Button size=\"sm\" type=\"button\" variant=\"info\" onClick={this.resetLoginForm}>\n                                <FontAwesomeIcon icon={faUndo} /> Reset\n                            </Button>\n                        </Card.Footer>\n                    </Card>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        auth: state.auth\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        authenticateUser: (username, password) => dispatch(authenticateUser(username, password))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {Row, Col, Card, Form, InputGroup, FormControl, Button, Alert} from 'react-bootstrap';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {faSignInAlt, faUser, faLock, faUndo} from \"@fortawesome/free-solid-svg-icons\";\nimport {registerUser} from '../../services/index';\nimport { useHistory } from \"react-router-dom\";\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.initialState;\n    }\n\n    initialState = {\n        username:'', password:'', passwordConfirm:'', error:''\n    };\n\n    credentialChange = event => {\n        this.setState({\n            [event.target.name] : event.target.value\n        });\n    };\n\n    validateUser = () => {\n        this.props.registerUser(this.state.username, this.state.password, this.state.passwordConfirm);\n        setTimeout(() => {\n            if(this.props.user.isRegistered) {\n                this.props.history.push(\"/login\");\n            } else {\n                this.resetLoginForm();\n                this.setState({\"error\":this.props.error});\n            }\n        }, 2500);\n    };\n\n    resetLoginForm = () => {\n        this.setState(() => this.initialState);\n    };\n\n    render() {\n        const {username, password, passwordConfirm, error} = this.state;\n\n        return (\n            <Row className=\"justify-content-md-center\">\n                <Col xs={5}>\n                    {this.props.message && <Alert variant=\"success\">{this.props.message}</Alert>}\n                    {error && <Alert variant=\"danger\">{error}</Alert>}\n                    <Card className={\"border border-dark bg-dark text-white\"}>\n                        <Card.Header>\n                            <FontAwesomeIcon icon={faSignInAlt}/> Register\n                        </Card.Header>\n                        <Card.Body>\n                                <Form.Group as={Col}>\n                                    <InputGroup>\n                                            <InputGroup.Text><FontAwesomeIcon icon={faUser}/></InputGroup.Text>\n                                        <FormControl required autoComplete=\"off\" type=\"text\" name=\"username\" value={username} onChange={this.credentialChange}\n                                            className={\"bg-dark text-white\"} placeholder=\"Enter Login\"/>\n                                    </InputGroup>\n                                </Form.Group>\n                                <Form.Group className=\"mt-3\" as={Col}>\n                                    <InputGroup>\n                                            <InputGroup.Text><FontAwesomeIcon icon={faLock}/></InputGroup.Text>\n                                        <FormControl required autoComplete=\"off\" type=\"password\" name=\"password\" value={password} onChange={this.credentialChange}\n                                            className={\"bg-dark text-white\"} placeholder=\"Enter Password\"/>\n                                    </InputGroup>\n                                </Form.Group>\n                                <Form.Group className=\"mt-3\" as={Col}>\n                                    <InputGroup>\n                                            <InputGroup.Text><FontAwesomeIcon icon={faLock}/></InputGroup.Text>\n                                        <FormControl required autoComplete=\"off\" type=\"password\" name=\"passwordConfirm\" value={passwordConfirm} onChange={this.credentialChange}\n                                            className={\"bg-dark text-white\"} placeholder=\"Confirm Password\"/>\n                                    </InputGroup>\n                                </Form.Group>\n                        </Card.Body>\n                        <Card.Footer style={{\"textAlign\":\"right\"}}>\n                            <Button size=\"sm\" type=\"button\" variant=\"success\" onClick={this.validateUser}\n                                disabled={this.state.username.length === 0 || this.state.password.length < 6 || this.state.passwordConfirm.length < 6 || this.state.password != this.state.passwordConfirm}>\n                                <FontAwesomeIcon icon={faSignInAlt}/> Register\n                            </Button>{' '}\n                            <Button size=\"sm\" type=\"button\" variant=\"info\" onClick={this.resetLoginForm}>\n                                <FontAwesomeIcon icon={faUndo}/> Reset\n                            </Button>\n                        </Card.Footer>\n                    </Card>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        user: state.user\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        registerUser: (username, password, passwordConfirm) => dispatch(registerUser(username, password, passwordConfirm))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","import axios from \"axios\";\n\nconst authToken = (token) => {\n  if (token) {\n    axios.defaults.headers.common[\"Authorization\"] = `${token}`;\n  } else {\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n};\n\nexport default authToken;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport authToken from \"../utils/authToken\";\nimport { Alert } from \"react-bootstrap\";\n\nconst Home = (props) => {\n  if (localStorage.jwtToken) {\n    authToken(localStorage.jwtToken);\n  }\n  return (\n    <Alert style={{ backgroundColor: \"#343A40\", color: \"#ffffff80\" }}>\n      Welcome, {props.auth.username}.\n    </Alert>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.auth,\n  };\n};\n\nexport default connect(mapStateToProps)(Home);\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://localhost:8080\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","import http from \"../http-common\";\n\nclass UploadFilesService {\n  upload(file, onUploadProgress) {\n    let formData = new FormData();\n\n    formData.append(\"file\", file);\n\n    return http.post(\"/api/upload\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      onUploadProgress,\n    });\n  }\n\n  getFiles() {\n    return http.get(\"/api/files\");\n  }\n}\n\nexport default new UploadFilesService();\n","import React, { Component } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport UploadService from \"../services/upload-files.service\";\n\nexport default class UploadFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFile = this.selectFile.bind(this);\n    this.upload = this.upload.bind(this);\n\n    this.state = {\n      selectedFiles: undefined,\n      currentFile: undefined,\n      progress: 0,\n      message: \"\",\n\n      fileInfos: [],\n    };\n  }\n\n  componentDidMount() {\n    UploadService.getFiles().then((response) => {\n      this.setState({\n        fileInfos: response.data,\n      });\n    });\n  }\n\n  selectFile(event) {\n    this.setState({\n      selectedFiles: event.target.files,\n    });\n  }\n\n  upload() {\n    let currentFile = this.state.selectedFiles[0];\n\n    this.setState({\n      progress: 0,\n      currentFile: currentFile,\n    });\n\n    UploadService.upload(currentFile, (event) => {\n      this.setState({\n        progress: Math.round((100 * event.loaded) / event.total),\n      });\n    })\n      .then((response) => {\n        this.setState({\n          message: response.data.message,\n        });\n        return UploadService.getFiles();\n      })\n      .then((files) => {\n        this.setState({\n          fileInfos: files.data,\n        });\n      })\n      .catch(() => {\n        this.setState({\n          progress: 0,\n          message: \"Could not upload the file!\",\n          currentFile: undefined,\n        });\n      });\n\n    this.setState({\n      selectedFiles: undefined,\n    });\n  }\n\n  render() {\n    const {\n      selectedFiles,\n      fileInfos,\n    } = this.state;\n\n    return (\n      <center>\n        <h1 class=\"mb-3 text-light\">Files Upload</h1>\n\n        <label className=\"btn btn-default text-light\">\n          <input type=\"file\" onChange={this.selectFile} />\n        </label>\n\n        <button\n          className=\"btn btn-warning\"\n          disabled={!selectedFiles}\n          onClick={this.upload}\n        >\n          Upload\n        </button>\n\n        <h1 class=\"mt-5 mb-3 text-light\">Files List</h1>\n        <Table striped bordered hover variant=\"dark\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Size</th>\n            </tr>\n          </thead>\n          <tbody>\n            {fileInfos &&\n              fileInfos.map((file, index) => (\n                <tr>\n                  <td>{index}</td>\n                  <td><a href={file.fileDownloadUri}>{file.fileName}</a></td>\n                  <td>{file.fileType}</td>\n                  <td>{file.size} mb</td>\n                </tr>\n              ))}\n          </tbody>\n        </Table>\n      </center>\n    );\n  }\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nconst Welcome = (props) => {\n  return (\n    <Card bg=\"dark\" text=\"light\">\n      <Card.Header>Welcome to our Animal Hotel!</Card.Header>\n      <center>\n      <img class = \"w-75 rounded m-4\" src=\"https://i.pinimg.com/originals/33/c6/f2/33c6f29e8a03b5cd8cf68e4435986195.jpg\"/>\n      </center>\n    </Card>\n  );\n};\n\nexport default Welcome;\n","import React, { Component } from \"react\";\nimport { Table, Card, Container, Row, Col } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport Menu from \"./Components/Menu/menu\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Login from \"./Components/User/Login\";\nimport Register from \"./Components/User/Register\";\nimport Home from \"./Components/Home\";\nimport Upload from \"./Components/Upload\";\nimport Welcome from \"./Components/Welcome\";\nimport './App.css';\nimport axios from \"axios\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    data: [],\n    oldUrl: \"\"\n  };\n\n  getRows = (url) => {\n    if (this.state.oldUrl != url) {\n      axios\n        .get(url, {\n          headers: {\n            Authorization: \"Bearer \" + localStorage.getItem(\"jwtToken\")\n          }\n        })\n        .then((response) => {\n          this.setState(() => {\n            return {\n              data: response.data,\n              oldUrl: url\n            };\n          });\n        })\n        .catch((error) => {\n        });\n    }\n\n    return this.state.data.map((el) => {\n      return (\n        <tr>\n          <td>{el.id}</td>\n          <td>{\n            el.name != null ? el.name : el.username\n          }</td>\n        </tr>\n      );\n    });\n  };\n\n  render() {\n    return (\n      <Router>\n        <Menu />\n        <Container>\n          <Row>\n            <Col lg={12} className=\"mt-5\">\n              <Switch>\n                <Route path=\"/\" exact component={Welcome} />\n                <Route\n                  path=\"/animalList\"\n                  exact\n                  render={() => {\n                    return (\n                      <center>\n                        <h1 class=\"mt-2 text-light\">Animals</h1>\n                        <hr />\n                        <Table striped bordered hover variant=\"dark\">\n                          <thead>\n                            <tr>\n                              <th>#</th>\n                              <th>Name</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {this.getRows('http://localhost:8080/api/animals')}\n                          </tbody>\n                        </Table>\n                      </center>\n                    );\n                  }}\n                />\n                <Route\n                  path=\"/userList\"\n                  exact\n                  render={() => {\n                    return (\n                      <center>\n                        <h1 class=\"mt-2 text-light\">Users</h1>\n                        <hr />\n                        <Table striped bordered hover variant=\"dark\">\n                          <thead>\n                            <tr>\n                              <th>#</th>\n                              <th>Name</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {this.getRows('http://localhost:8080/api/users')}\n                          </tbody>\n                        </Table>\n                      </center>\n                    );\n                  }}\n                />\n                <Route path=\"/home\" exact component={Home} />\n                <Route path=\"/register\" exact component={Register} />\n                <Route path=\"/login\" exact component={Login} />\n                <Route path=\"/files\" exact component={Upload} />\n                <Route\n                  exact\n                  path=\"/about\"\n                  render={() => <center><h1 class=\"mt-5 text-light\">About Hotel: tel: 9379992</h1></center>}\n                />\n                <Route\n                  path=\"/logout\"\n                  exact\n                  render={() => <center><h2 class=\"mt-5 text-light\">User loged out successfully!</h2></center>}\n                />\n                <Route path=\"*\" exact>\n                  <Redirect to=\"/\" />\n                </Route>\n              </Switch>\n            </Col>\n          </Row>\n        </Container>\n      </Router>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as UT from \"./userTypes\";\n\nconst initialState = {\n  isRegistered: false,\n  error: \"\",\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UT.USER_REQUEST:\n      return {\n        ...state,\n      };\n    case UT.USER_SUCCESS:\n      return {\n        error: \"\",\n        isRegistered: true,\n      };\n    case UT.USER_FAILURE:\n      return {\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { LOGIN_REQUEST, LOGOUT_REQUEST, SUCCESS, FAILURE } from \"./authTypes\";\n\nconst initialState = {\n  username: \"\",\n  isLoggedIn: \"\",\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n    case LOGOUT_REQUEST:\n      return {\n        ...state,\n      };\n    case SUCCESS:\n    case FAILURE:\n      return {\n        username: action.payload.username,\n        isLoggedIn: action.payload.isLoggedIn,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport userReducer from \"./user/userReducer\";\nimport authReducer from \"./user/auth/authReducer\";\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  auth: authReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./rootReducer\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport store from './services/store';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}